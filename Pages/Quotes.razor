@page "/Quotes"
@inject MangaQuotes.Data.Services.QuoteService service
@inject MangaQuotes.Data.Services.CharacterService characterService
@inject IJSRuntime JsRuntime
@using MangaQuotes.Shared

<h1 class="rvt-ts-xxl">Quotes</h1>

@if (QuotesList.Any())
{
    <table class="rvt-table-stripes rvt-m-tb-md">
        <caption class="sr-only">List of Characters</caption>
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Preceded By</th>
                <th scope="col">Character</th>
                <th scope="col">Location</th>
                <th scope="col">Text</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var quote in QuotesList)
            {
                <tr>
                    <td>@quote.Id</td>
                    <td>@quote.ParentQuote?.Id</td>
                    <td>@quote.Character?.Name</td>
                    <td>Ch. @quote.Chapter Pg. @quote.Page</td>
                    <td>@quote.Text</td>
                    <td>
                        @* <button class="rvt-button rvt-button--primary" @onclick="(() => SetQuoteForUpdate(quote))">Edit</button> *@
                        <button class="rvt-button rvt-button--danger" @onclick="(() => DeleteQuote(quote))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="rvt-inline-alert rvt-inline-alert--standalone rvt-inline-alert--info rvt-m-all-md">
        <span class="rvt-inline-alert__icon">
            <svg role="img" xmlns="http://www.w3.org/2000/svg" class="rvt-icon">
                <use xlink:href="/images/rvt-icons.svg#rvt-icon-info-circle"></use>
            </svg>
        </span>
        <span class="rvt-inline-alert__message" id="radio-list-message">
            No quotes found.
        </span>
    </div>
}

<div class="rvt-container rvt-container--junior rvt-container--center">
    <div class="rvt-grid">
        <div class="rvt-grid__item-6-md-up">
            <h2>Add New Quote</h2>
            <EditForm Model="@NewQuote">
                <div>
                    <RivetInputSelectEntity @bind-Value="NewQuote.ParentQuote" @oninput="ParentQuoteChanged" Options=@QuotesList Label="Preceded By" DisplayLambda=@QuoteOptionText/>
                </div>

                <div>
                    <RivetInputSelectEntity @bind-Value="NewQuote.Character" Options=@Characters Label="Character" DisplayLambda=@(c => $"{c.Name}")/>
                </div>

                <div>
                    <label for="chapter">Chapter</label>
                    <input type="text" id="chapter" class="form-control" @bind-value="@NewQuote.Chapter" />
                </div>

                <div>
                    <label for="page">Page</label>
                    <input type="text" id="page" class="form-control" @bind-value="@NewQuote.Page" />
                </div>

                <div>
                    <label for="quoteText">Quote Text</label>
                    <InputTextArea id="quoteText" class="form-control" @bind-Value="@NewQuote.Text" />
                </div>

                <div>
                    <button class="btn btn-info" @onclick="AddNewQuote"> Add Quote</button>
                </div>
            </EditForm>
        </div>
        <div class="rvt-grid__item-6-md-up">
            <h2>Edit Quote</h2>
            <p>Not implemented.</p>
            @* <EditForm Model="@UpdateQuote">
                <div>
                    <label for="parent">Preceded By</label>
                    <input type="text" id="parent" class="form-control" @bind-value="@UpdateQuote.ParentQuote.Id" />
                </div>

                <div>
                    <label for="character">Character ID</label>
                    <input type="text" id="name" class="form-control" @bind-value="@UpdateQuote.Character.Id" />
                </div>

                <div>
                    <label for="chapter">Chapter</label>
                    <input type="text" id="chapter" class="form-control" @bind-value="@UpdateQuote.Chapter" />
                </div>

                <div>
                    <label for="page">Page</label>
                    <input type="text" id="page" class="form-control" @bind-value="@UpdateQuote.Page" />
                </div>

                <div>
                    <label for="quoteText">Quote Text</label>
                    <InputTextArea id="quoteText" class="form-control" @bind-Value="@UpdateQuote.Text" />
                </div>

                <div>
                    <button class="btn btn-info" @onclick="UpdateQuoteData"> Update Quote</button>
                </div>
            </EditForm> *@
        </div>
    </div>
</div>

@code {

    List<Quote> QuotesList = new List<Quote>();
    List<Character> Characters = new List<Character>();
    protected override async Task OnInitializedAsync()
    {
        Characters = (await characterService.GetCharactersAsync())
            .OrderBy(c => c.Name)
            .ToList();
        
        await RefreshQuotes();
    }

    private async Task RefreshQuotes()
    {
        QuotesList = await service.GetQuotesAsync();
    }

    public Quote NewQuote { get; set; } = new Quote() { ParentQuote = new Quote(), Character = new Character() };
    private async Task AddNewQuote()
    {
        await service.AddQuoteAsync(NewQuote);
        NewQuote = new Quote() { ParentQuote = new Quote(), Character = new Character() };
        await RefreshQuotes();
    }

    Quote UpdateQuote = new Quote() { ParentQuote = new Quote(), Character = new Character() };
    private void SetQuoteForUpdate(Quote quote)
    {
        quote.ParentQuote = quote.ParentQuote ?? new Quote();
        UpdateQuote = quote;
    }

    private async Task UpdateQuoteData()
    {
        await service.UpdateQuoteAsync(UpdateQuote);
        await RefreshQuotes();
    }

    private async Task DeleteQuote(Quote quote)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete Quote {quote.Id}?");
        if(confirmed)
        {
            await service.DeleteQuoteAsync(quote);
            await RefreshQuotes();
        }
    }

    private string QuoteOptionText(Quote q)
    {
        var truncatedQuote = q.Text.Length > 100 ? $"{q.Text.Substring(0, 100)}..." : q.Text;
        return $"Ch. {q.Chapter} Pg. {q.Page} {q.Character.Name} {truncatedQuote}";
    }

    private void ParentQuoteChanged(ChangeEventArgs evt)
    {
        int id = 0;
        Int32.TryParse(evt.Value.ToString(), out id);
        var parentQuote = QuotesList.SingleOrDefault(q => q.Id == id);
        if(parentQuote != null)
        {
            NewQuote.Chapter = parentQuote.Chapter;
            NewQuote.Page = parentQuote.Page;
        }
    }
}