@inject NavigationManager Navigation
@implements IDisposable

<div class="rvt-header__controls">
    <!-- Main inline nav element -->
    <nav class="rvt-header__main-nav" role="navigation">
        <ul>
            @foreach(var link in Links)
            {
                <li>
                    @if(link.IsCurrentPage(_CurrentPage))
                    {
                        <a href="@link.Url" aria-current="page">@link.Text</a>
                    }
                    else
                    {
                        <a href="@link.Url">@link.Text</a>
                    }
                </li>
            }
        </ul>
    </nav>
    <!-- Drawer close button - shows on small screens -->
    <button type="button" class="rvt-drawer-button" aria-haspopup="true" aria-expanded="false" data-drawer-toggle="mobile-drawer-2">
        <span class="sr-only">Toggle menu</span>
        <svg aria-hidden="true" class="rvt-drawer-button-open" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
            <g fill="currentColor">
                <path d="M15,3H1A1,1,0,0,1,1,1H15a1,1,0,0,1,0,2Z"/>
                <path d="M15,9H1A1,1,0,0,1,1,7H15a1,1,0,0,1,0,2Z"/>
                <path d="M15,15H1a1,1,0,0,1,0-2H15a1,1,0,0,1,0,2Z"/>
            </g>
        </svg>
        <svg aria-hidden="true" class="rvt-drawer-button-close" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
            <path fill="currentColor" d="M9.41,8l5.29-5.29a1,1,0,0,0-1.41-1.41L8,6.59,2.71,1.29A1,1,0,0,0,1.29,2.71L6.59,8,1.29,13.29a1,1,0,1,0,1.41,1.41L8,9.41l5.29,5.29a1,1,0,0,0,1.41-1.41Z"/>
        </svg>
    </button>
</div>
<!--
    Drawer - small screens only
    NOTE: If we are going to give people the option to use the drawer
    on desktop as well, a combo of duplicating markup and showing/hiding
    is probably the best way to handle that kind of flexibility.
    We'll just need to be clear about it in the documentation.
-->
<div class="rvt-drawer" aria-hidden="true" id="mobile-drawer-2">
    <!-- Drawer nav -->
    <nav class="rvt-drawer__nav" role="navigation">
        <ul>
            @foreach(var link in Links)
            {
                <li>
                    @if(link.IsCurrentPage(_CurrentPage))
                    {
                        <a href="@link.Url" aria-current="page">@link.Text</a>
                    }
                    else
                    {
                        <a href="@link.Url">@link.Text</a>
                    }
                </li>
            }
        </ul>
        <button type="button" class="rvt-drawer__bottom-close">Close nav</button>
    </nav>
</div>

@code {
    private class Link
    {
        public string Url {get; set;}
        public string Text {get; set;}

        public Link(string url, string text)
        {
            Url = url;
            Text = text;
        }

        public bool IsCurrentPage(string currentUrl)
        {
            var uri = new Uri(currentUrl);
            return uri.AbsolutePath.ToLower() == Url.ToLower();
        }
    }
    
    List<Link> Links = new List<Link> { new Link("/Characters", "Characters"), new Link("/Quotes", "Quotes") };
    
    private string _CurrentPage { get; set; }

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += HandleLocationChanged;
        _CurrentPage = Navigation.Uri;
        base.OnInitialized();
    }
    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        _CurrentPage = e.Location;
        var x = new Uri(Navigation.Uri);
        var z = System.Text.Json.JsonSerializer.Serialize(x);
        Console.WriteLine("Test.");
        Console.WriteLine(z);
        StateHasChanged(); //Let the component know it needs to redraw things.  
    }
    public void Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        Navigation.LocationChanged -= HandleLocationChanged;
    }

}