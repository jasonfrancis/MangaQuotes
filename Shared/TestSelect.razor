@typeparam T;
@inherits InputBase<T>;

<label for=@_Id class="rvt-m-top-md">@Label</label>
<InputSelect 
    @bind-Value=StringValue
    @oninput=SelectedValueChanged
    @onchange=SelectedValueChanged
    id=@_Id
    aria-describedby=@_Id
    class=@(IsValid() ? CssClass : "rvt-validation-danger")
    aria-invalid=@(IsValid() ? "true" : "false")
>
    <option value=""></option>
    @foreach(var option in Options ?? new List<T>())
    {
        <option value=@GetId(option)>@GetDisplayName(option)</option>
    }
</InputSelect>
<Description Id=@_Id Value=@Description />
<ValidationMessages Id=@_Id Messages=@_ValidationMessages />

@code
{
    ///<summary> The options in this select.</summary>
    [Parameter]
    public List<T> Options { get; set; }
    
    ///<summary> The text used in th HTML Label tag.</summary>
    [Parameter]
    public string Label { get; set; }
    
    ///<summary> Information text, displayed in a smaller font, beneath the HTML Input element.</summary>
    [Parameter]
    public string Description { get; set; }

    private string StringValue = "";
    private string _Id = "input-" + System.Guid.NewGuid().ToString();
    private List<string> _ValidationMessages = new List<string>();
    
    private string GetDisplayName(T item)
        => item == null
        ? null
        : (string)typeof(Entity).GetMethod("GetDisplayName").Invoke(item, null);
    
    private string GetId(T item)
        => item == null
        ? null
        : (string)typeof(Entity).GetMethod("ToString").Invoke(item, null);

    private void SelectedValueChanged(ChangeEventArgs evt)
    {
        Console.WriteLine($"TestSelect selected value changed to {evt.Value}");
        Console.WriteLine("TestSelect updating actual value...");
        ValueChanged.InvokeAsync(Options.SingleOrDefault(o => GetId(o) == evt.Value.ToString())).Wait();
        Console.WriteLine($"Value is now {GetId(Value)}, {GetDisplayName(Value)}");
    }
    protected override void OnInitialized()
    {
        //Throw an error if T is not an Entity.
        if(typeof(T).IsSubclassOf(typeof(MangaQuotes.Data.Entity)) == false) {
            throw new Exception($"{typeof(T).Name} does not inherit from MangaQuotes.Data.Entity.");
        }

        base.EditContext.OnValidationStateChanged += ValidationStateChanged;
    }
    
    public void Dispose()
    {
        base.EditContext.OnValidationStateChanged -= ValidationStateChanged;
    }
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Console.WriteLine($"TestSelect Parameters are set. Value is {GetId(Value)}");
        StringValue = GetId(Value);
    }

    private void ValidationStateChanged(object sender, ValidationStateChangedEventArgs e)
    {
        _ValidationMessages = this.EditContext.IsModified() ? this.EditContext.GetValidationMessages(this.FieldIdentifier).ToList() : new List<string> ();
    }
    
    private bool IsValid()
    {
        return _ValidationMessages.Count == 0;
    }

    protected override bool TryParseValueFromString(string value, out T result, out string validationErrorMessage)
    {
        throw new System.NotImplementedException();
    }
}