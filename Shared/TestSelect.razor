@typeparam T;
@inherits InputBase<T>;

<p>Test: @CurrentValueAsString vs @GetId(Value), @GetDisplayName(Value)</p>
<InputSelect @bind-Value=StringValue @oninput=SelectedValueChanged @onchange=SelectedValueChanged>
    @foreach(var option in Options ?? new List<T>())
    {
        <option value=@GetId(option)>@GetDisplayName(option)</option>
    }
</InputSelect>
@code
{
    ///<summary> The options in this select.</summary>
    [Parameter]
    public List<T> Options { get; set; }
    
    private string StringValue = "";
    private string GetDisplayName(T item) => (string)typeof(Entity).GetMethod("GetDisplayName").Invoke(item, null);
    private string GetId(T item) => (string)typeof(Entity).GetMethod("ToString").Invoke(item, null);

    private void SelectedValueChanged(ChangeEventArgs evt)
    {
        Console.WriteLine($"TestSelect selected value changed to {evt.Value}");
        Console.WriteLine("TestSelect updating actual value...");
        ValueChanged.InvokeAsync(Options.SingleOrDefault(o => GetId(o) == evt.Value.ToString())).Wait();
        Console.WriteLine($"Value is now {GetId(Value)}, {GetDisplayName(Value)}");
    }
    protected override void OnInitialized()
    {
        //Throw an error if T is not an Entity.
        if(typeof(T).IsSubclassOf(typeof(MangaQuotes.Data.Entity)) == false) {
            throw new Exception($"{typeof(T).Name} does not inherit from MangaQuotes.Data.Entity.");
        }
    }
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Console.WriteLine($"TestSelect Parameters are set. Value is {GetId(Value)}");
        StringValue = GetId(Value);
    }

    

    protected override bool TryParseValueFromString(string value, out T result, out string validationErrorMessage)
    {
        throw new System.NotImplementedException();
        //result = value;
        //validationErrorMessage = null;
        //return true;
        /*Console.WriteLine($"TestSelect - Parsing {value}");
        result = null;
        validationErrorMessage = "Work in progress.";
        return false;*/
    }
}
        protected override void